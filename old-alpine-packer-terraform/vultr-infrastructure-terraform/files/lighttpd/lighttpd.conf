var.basedir  = "/var/www/localhost"
var.logdir   = "/var/log/lighttpd"
var.statedir = "/var/lib/lighttpd"

# At the very least, mod_access and mod_accesslog should be enabled.
# All other modules should only be loaded if necessary.
# NOTE: the order of modules is important.
server.modules = (
    "mod_redirect",
    "mod_alias",
    "mod_access",
    "mod_auth",
    "mod_setenv",
    "mod_proxy",
    "mod_deflate",
    "mod_expire",
    "mod_accesslog"
)

# {{{ includes
include "mime-types.conf"
# uncomment for cgi support
#   include "mod_cgi.conf"
# uncomment for php/fastcgi support
#   include "mod_fastcgi.conf"
# uncomment for php/fastcgi fpm support
#   include "mod_fastcgi_fpm.conf"
# }}}

server.username = "lighttpd"
server.groupname = "lighttpd"
server.document-root = var.basedir + "/htdocs"
server.errorlog  = var.logdir  + "/error.log"
server.pid-file = "/run/lighttpd.pid"
server.port = 80

# log errors to syslog instead
server.errorlog-use-syslog = "enable"
server.indexfiles = (index.html")

server.follow-symlink = "enable"

# strict parsing and normalization of URL for consistency and security
# https://redmine.lighttpd.net/projects/lighttpd/wiki/Server_http-parseoptsDetails
# (might need to explicitly set "url-path-2f-decode" = "disable"
#  if a specific application is encoding URLs inside url-path)
server.http-parseopts = (
  "header-strict"           => "enable",# default
  "host-strict"             => "enable",# default
  "host-normalize"          => "enable",# default
  "url-normalize-unreserved"=> "enable",# recommended highly
  "url-normalize-required"  => "enable",# recommended
  "url-ctrls-reject"        => "enable",# recommended
  "url-path-2f-decode"      => "enable",# recommended highly (unless breaks app)
 #"url-path-2f-reject"      => "enable",
  "url-path-dotseg-remove"  => "enable",# recommended highly (unless breaks app)
 #"url-path-dotseg-reject"  => "enable",
 #"url-query-20-plus"       => "enable",# consistency in query string
)

# error-handler for status 404
# server.error-handler-404 = "/error-handler.html"
# server.error-handler-404 = "/error-handler.php"

# Format: <errorfile-prefix><status-code>.html
# -> ..../status-404.html for 'File not found'
# server.errorfile-prefix    = var.basedir + "/error/status-"

accesslog.filename   = var.logdir + "/access.log"

# {{{ mod_access
url.access-deny = ("~", ".inc")

# {{{ mod_ssl

$SERVER["socket"] == "0.0.0.0:443" {
    ssl.engine  = "enable"
    ssl.pemfile = "/etc/letsencrypt/live/wildtechgarden.ca/fullchain.pem"
    ssl.privkey = "/etc/letsencrypt/live/wildtechgarden.ca/privkey.pem"
    ssl.cipher-list = "HIGH"
}

$SERVER["socket"] == "[::]:443" {
    ssl.engine  = "enable"
    ssl.pemfile = "/etc/letsencrypt/live/wildtechgarden.ca/fullchain.pem"
    ssl.privkey = "/etc/letsencrypt/live/wildtechgarden.ca/privkey.pem"
    ssl.cipher-list = "HIGH"
}

# {{{ mod_deflate

deflate.cache-dir   = var.statedir + "/cache/compress"
deflate.mimetypes   = ("text/plain", "text/html")

# {{{ mod_proxy

$HTTP["url"] =~ "^/radicale/" {
    proxy.server = (
        "/radicale/" =>
            ( "radicale" =>
                (
                    "host" => "localhost",
                    "port" => 5232
                )
            )
        )

    proxy.forwarded = (
            "for" => 1,
            "proto" => 1,
            "host" => 1,
            "remote_user" => 1
        )

    proxy.header = (
            "map-urlpath" => (
                "/radicale/" => "/"
            )
        )

    setenv.add-request-header = (
        "X-Script_Name" => "/radicale",
        "Script-Name" => "/radicale"
    )
}

# {{{ mod_auth
auth.backend               = "htpasswd"
auth.backend.htpasswd.userfile = "/etc/lighttpd/users"

auth.require               = ( "/radicale" =>
                               (
                                 "method"  => "basic",
                                 "realm"   => "Radicale - Password Required",
                                 "require" => "valid-user"
                               ),
                             )
# }}}

# {{{ extra rules
#
# set Content-Encoding and reset Content-Type for browsers that
# support decompressing on-the-fly (requires mod_setenv)
$HTTP["url"] =~ "\.gz$" {
     setenv.add-response-header = ("Content-Encoding" => "x-gzip")
     mimetype.assign = (".gz" => "text/plain")
}

$HTTP["url"] =~ "\.bz2$" {
     setenv.add-response-header = ("Content-Encoding" => "x-bzip2")
     mimetype.assign = (".bz2" => "text/plain")
}

# {{{ debug
# debug.log-request-header   = "enable"
# debug.log-response-header  = "enable"
# debug.log-request-handling = "enable"
# debug.log-file-not-found   = "enable"
# }}}

$HTTP["host"] =~ "(hugo-debug-tables.wildtechgarden.ca|hugo-test-debug-tables.wildtechgarden.ca)" {
    $HTTP["url"] !~ "^/.well-known/acme-challenge/" {
        server.name = "hugo-debug-tables.wildtechgarden.ca"
        server.document-root = "/var/www/hugo-debug-tables.wildtechgarden.ca"
    }
}

$HTTP["host"] == "minimal-test-theme.wildtechgarden.ca" {
    $HTTP["url"] !~ "^/.well-known/acme-challenge/" {
        server.name = "minimal-test-theme.wildtechgarden.ca"
        server.document-root = "/var/www/minimal-test-theme.wildtechgarden.ca"
    }
}

$HTTP["host"] == "metadata-mod.wildtechgarden.ca" {
    $HTTP["url"] !~ "^/.well-known/acme-challenge/" {
        server.name = "metadata-mod.wildtechgarden.ca"
        server.document-root = "/var/www/metadata-mod.wildtechgarden.ca"
    }
}

$HTTP["scheme"] == "http" {
    $HTTP["url"] !~ "^/.well-known/acme-challenge/" {
        $HTTP["host"] !~ "^(www\.)?(d-f-d.net|thecshore|radicale-lighttp-01|(hugo-(test-)?debug-tables|minimal-test-theme|metadata-mod).wildtechgarden.ca)" {
                 url.redirect = ( "^/(.*)" => "https://wildtechgarden.ca/$1" )
        }
        $HTTP["host"] =~ "^(www\.)?(d-f-d.net|thecshore)" {
                url.redirect = ( "^/(.*)" => "https://princesandmadmen.ca/$1" )
        }
        $HTTP["host"] == "radicale-lighttpd-01.wildtechgarden.ca" {
                url.redirect = ( "^/(.*)" => "https://radicale-lighttpd-01.wildtechgarden.ca/$1" )
        }
        $HTTP["host"] =~ "^(hugo-(test-)?debug-tables.wildtechgarden.ca)" {
            url.redirect = ( "^/(.*)" => "https://hugo-test-debug-tables.wildtechgarden.ca/$1" )
        }
        $HTTP["host"] == "minimal-test-theme.wildtechgarden.ca)" {
            url.redirect = ( "^/(.*)" => "https://minimal-test-theme.wildtechgarden.ca/$1" )
        }
        $HTTP["host"] == "metadata-mod.wildtechgarden.ca)" {
            url.redirect = ( "^/(.*)" => "https://metadata-mod.wildtechgarden.ca/$1" )
        }
    }
}

$HTTP["scheme"] == "http" {
    $HTTP["url"] =~ "^/.well-known/acme-challenge/" {
    $HTTP["host"] =~ "^(www\.)?(d-f-d.net|thecshore|danieldickinson|danielfdickinson.net|thecshore|thewildtechgarden)" {
            server.name = "$HTTP['host']"
        server.document-root = "/var/www/html"
    }
    }
}

$HTTP["scheme"] == "https" {
    $HTTP["host"] !~ "^(www\.)?(d-f-d.net|thecshore|radicale-lighttpd-01|(hugo-(test-)?debug-tables|minimal-test-theme|metadata-mod).wildtechgarden.ca)" {
        url.redirect = ( "^/(.*)" => "https://wildtechgarden.ca/$1" )
    }
    $HTTP["host"] =~ "^(www\.)?(d-f-d.net|thecshore)" {
    url.redirect = ("^/(.*)" => "https://www.princesandmadmen.ca/$1" )
    }
    $HTTP["host"] == "hugo-debug-tables.wildtechgarden.ca" {
    url.redirect = ("^/(.*)" => "https://hugo-test-debug-tables.wildtechgarden.ca/$1" )
    }
    $HTTP["host"] == "^radicale-lighttpd-01.wildtechgarden.ca" {
        $HTTP["url"] !~ "^/(robots.txt|radicale)" {
            url.redirect = ( "^/(.*)" => "https://www.wildtechgarden.ca/$1" )
        }
    }
}

include "/etc/lighttpd/denybadbots.conf"

# vim: set ft=conf foldmethod=marker et :
